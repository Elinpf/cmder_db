--- 生成hash
# desc: 其他未收录的脚本如何生成hash
Note
# refer: https://miloserdov.org/?p=5008#24 (描述原理)
# refer: https://fossies.org/dox/john-1.9.0-jumbo-1/pfx2john_8py_source.html (所有脚本源码)

# desc: zip
zip2john #{file} > #{file}.hash
@file.desc(zip 文件)

# """ 通常情况下，作为文件形式存在的证书一般有三种格式：

第一种：带有私钥的证书，由 Public Key Cryptography Standards #12，PKCS#12 标准定义，包含了公钥和私钥的二进制格式的证书形式，以. pfx 作为证书文件后缀名。
第二种：DER Encoded Binary (.cer)  二进制编码的证书，证书中没有私钥，DER 编码二进制格式的证书文件，以. cer 作为证书文件后缀名。
第三种：Base64 Encoded(.cer)，Base64 编码的证书，证书中没有私钥，BASE64 编码格式的证书文件，也是以. cer 作为证书文件后缀名。

所以只要有密码pfx就可以生成 公钥和私钥

但是要注意，使用这个脚本会作为binary在输出是会有b'...'，这是需要删除的, 还有 '$b'需要替换为$，固定的四个地方 例如：

legacyy_dev_auth.pfx:$pfxng$1$20$2000$20$b'eb755568327396de179c4a5d668ba8fe550ae18a'$b'3082099c3082060f06092a8....40401000000'$b'86b99e245b03465a6ce0c974055e6dcc74f0e893':::::legacyy_dev_auth.pfx
修改为
legacyy_dev_auth.pfx:$pfxng$1$20$2000$20$eb755568327396de179c4a5d668ba8fe550ae18a$3082099c3082060f06092a8....40401000000$86b99e245b03465a6ce0c974055e6dcc74f0e893:::::legacyy_dev_auth.pfx
"""
# desc: pfx
pfx2john.py #{file} > #{file}.hash
@file.desc(pfx 证书文件)

--- 暴力破解

# desc: Hash 密码类型识别
hash-identifier

# desc: John base
john --wordlist=#{WORDLIST} #{hash_file} 

# desc: 查看已破解的密码
# 第二组数据就是密码
john --show #{hash_file}

# desc: hashcat base
hashcat -a 0 -m #{hash_type} #{hash_file} #{WORDLIST}

@hash_type.recommend(0(MD5))
@hash_type.recommend(1400(SHA-256))
@hash_type.recommend(1700(SHA-512))